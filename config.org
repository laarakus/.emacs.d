#+STARTUP: hidestars

* Emacs
** information
#+begin_src emacs-lisp
  (setq user-full-name "Walid LAARAKI"
        user-mail-address "walid@laaraki.com"
        user-home-directory (concat (getenv "HOME")"/")
        user-emacs-directory (concat user-home-directory ".emacs.d/")
        custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src
** fonts
#+Begin_src emacs-lisp
  (set-face-attribute 'default nil :family "JetBrains Mono" :height 160)
  (set-face-attribute 'variable-pitch nil :family "Sans" :height 160)
#+end_src
** functions
#+Begin_src emacs-lisp
  (defun laarakus/describe-at-point ()
    "Show the documentation of the Elisp function and variable near point"
    (interactive)
    (let (sym)
      (cond ((setq sym (ignore-errors
                         (with-syntax-table emacs-lisp-mode-syntax-table
                           (save-excursion
                             (or (not (zerop (skip-syntax-backward "_w")))
                                 (eq (char-syntax (char-after (point))) ?w)
                                 (eq (char-syntax (char-after (point))) ?_)
                                 (forward-sexp -1))
                             (skip-chars-forward "`'")
                             (let ((obj (read (current-buffer))))
                               (and (symbolp obj) (fboundp obj) obj))))))
             (describe-function sym))
            ((setq sym (variable-at-point)) (describe-variable sym))
            ((setq sym (function-at-point)) (describe-function sym)))))
  (defun laarakus/launch-order-local-env ()
    "Launch order workers and api"
    (interactive)
    (let ((eshell-buffer-name "o:initial-load"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run worker:initial-load:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "o:jobs"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run worker:order-jobs:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "o:payment"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run worker:payment-events:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "o:shipping"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run worker:shipping-events:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "o:outgoing"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run worker:order-events:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "o:acl"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run worker:acl-events:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "o:extra-action"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run worker:magento-order-action-events:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "o:documentary"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run worker:documentary-events:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "o:api"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/order && npm run dev")
      (eshell-send-input)))
  (defun laarakus/launch-documentary-local-env ()
    "Launch order workers and api"
    (interactive)
    (let ((eshell-buffer-name "od:event-faker"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/order/bin/events-faker/ && npm run dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "od:acl"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/order && npm run worker:acl:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "od:documentary"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/order && npm run worker:documentary:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "od:init-history"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/order && npm run worker:init-history:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "od:shipping"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/order && npm run worker:shipping:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "od:order"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/order && npm run worker:order:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "od:jobs"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/order && npm run worker:jobs:dev")
      (eshell-send-input))
    (let ((eshell-buffer-name "od:document:store"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/documentary && npm run dev:command-worker")
      (eshell-send-input))
    (let ((eshell-buffer-name "od:api"))
      (eshell)
      (rename-buffer eshell-buffer-name)
      (insert "cd ~/workspace/documentary/apps/order && npm run dev")
      (eshell-send-input)))

  (defun laarakus/git-branch ()
    "Get the current Git branch using vc-mode."
    (let ((backend (vc-backend buffer-file-name)))
      (if (eq backend 'Git)
          (substring-no-properties (vc-git--symbolic-ref "HEAD")) "")))

#+end_src
** diminish
#+Begin_src emacs-lisp
  (diminish 'visual-line-mode)
  (diminish 'eldoc-mode)
  (diminish 'whitespace-mode)
#+end_src
** bindings
#+Begin_src emacs-lisp
  (global-set-key (kbd "C-c C-x i") 'laarakus/describe-at-point)
  (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
  (global-set-key (kbd "M-p") 'text-scale-increase)
  (global-set-key (kbd "M-m") 'text-scale-decrease)
  (global-set-key (kbd "C-c s") 'eshell)
  (global-set-key (kbd "C-c b") 'ibuffer)
#+end_src
** modes
#+Begin_src emacs-lisp
  (show-paren-mode t)
  (blink-cursor-mode -1)
  (column-number-mode 1)
  (global-hl-line-mode 1)
  (global-whitespace-mode 1)
  (global-font-lock-mode)
  (toggle-indicate-empty-lines 1)
  (savehist-mode 1)
  (icomplete-mode -1)
  (electric-pair-mode 1)
  (delete-selection-mode t)
  (global-auto-revert-mode 1)
#+end_src
** visual
#+Begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(undecorated-round . t))
  (setopt use-short-answers t)
  (setq-default truncate-lines 1
                cursor-in-non-selected-windows nil)
  (setq echo-keystrokes 0.1
        initial-buffer-choice t
        scroll-step 1
        frame-resize-pixelwise t
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-progressive-speed nil
        visible-bell t
        blink-matching-paren t
        show-paren-delay 0
        show-paren-style 'expression
        fill-column 80
        truncate-partial-width-windows 1
        initial-frame-alist '((fullscreen . maximized))
        frame-title-format ""
        ring-bell-function 'ignore
        icon-title-format frame-title-format)
  (setq-default mode-line-format '(
                                   "%e"
                                   " "
                                   (:eval (format "%s" (laarakus/git-branch)))
                                   mode-line-frame-identification
                                   mode-line-buffer-identification
                                   mode-line-front-space
                                   mode-line-mule-info
                                   mode-line-client
                                   mode-line-modified
                                   mode-line-remote
                                   mode-line-position
                                   mode-line-modes
                                   mode-line-misc-info
                                   mode-line-end-spaces))
#+end_src
** general
#+Begin_src emacs-lisp
  (setq grep-command "grep -nHor --exclude-dir={assets,*\bower_components,\*node_modules} ctrl "
        backup-directory-alist '(("." . "~/.emacs.d/backups"))
        delete-old-versions -1
        version-control t
        native-comp-async-report-warnings-errors 'silent
        vc-make-backup-files t
        auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))
        savehist-file "~/.emacs.d/savehist"
        history-length t
        history-delete-duplicates t
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring)
        locale-coding-system 'utf-8
        sentence-end-double-space nil
        indent-tabs-mode nil
        tab-width 2
        mac-command-modifier 'meta
        mac-option-modifier 'none)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** eshell
#+begin_src emacs-lisp
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
  (add-hook 'eshell-mode-hook (lambda () (setenv "PAGER" "cat") (setenv "EDITOR" "emacsclient")))
#+end_src
** dired
#+begin_src emacs-lisp
  (setq trash-directory (concat user-home-directory "trash")
        delete-by-moving-to-trash t
        dired-listing-switches "-aFlGXh1v --group-directories-first"
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)
  (add-hook 'dired-mode-hook (lambda () (visual-line-mode -1)))
#+end_src
** tramp
#+begin_src emacs-lisp
  (set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
#+end_src
** ibuffer
#+begin_src emacs-lisp
  (setq ibuffer-default-sorting-mode 'major-mode
        ibuffer-movement-cycle nil
        ibuffer-never-show-predicates '("^\\*helm")
        savehist-save-minibuffer-history 1
        ibuffer-show-empty-filter-groups nil
        ibuffer-saved-filter-groups
        (quote (("default"
                 ("eshell" (mode . eshell-mode))
                 ("dired" (mode . dired-mode))
                 ("web" (or
                         (mode . typescript-ts-mode)
                         (mode . js2-mode)
                         (mode . restclient-mode)
                         (mode . web-mode)
                         (mode . php-mode)
                         (mode . css-mode)))
                 ("org" (mode . org-mode))
                 ("images" (mode . image-mode))
                 ("help" (or
                          (name . "^\\*Help\\*$")
                          (name . "^\\*Apropos\\*$")
                          (name . "^\\*info\\*$")))
                 ("emacs" (or
                           (name . "^\\*Edit Macro\\*$")
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src
** tree-sitter
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((css "https://github.com/tree-sitter/tree-sitter-css")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
          (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
          ))
;;; (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
#+end_src
** typescript-ts-mode
#+begin_src emacs-lisp
  (use-package typescript-ts-mode
    :bind (("C-c C-c" . comment-or-uncomment-region)
           ("C-c C-x d" . lsp-goto-type-definition)
           ("C-c C-x i" . lsp-goto-implementation))
    :straight (:type built-in)
    :mode (("\\.ts" . typescript-ts-mode)
           ("\\.js" . js-ts-mode)
           ("\\.json" . json-ts-mode)))
#+end_src
** org-mode
#+begin_src emacs-lisp
  (use-package org-mode
    :straight (:type built-in)
    :mode (("\\.org$" . org-mode))
    :config
    (progn
      (setq org-src-fontify-natively t
            org-src-window-setup 'current-window
            org-src-strip-leading-and-trailing-blank-lines t
            org-src-preserve-indentation t
            org-src-tab-acts-natively t
            org-agenda-include-diary nil
            org-use-speed-commands t
            org-use-fast-todo-selection t
            org-agenda-start-on-weekday 7
            org-tags-column 45
            org-directory "~/notes"
            org-mobile-inbox-for-pull "~/Library/Mobile Documents/iCloud~com~mobileorg~mobileorg/Documents/mobileorg.org"
            org-mobile-directory "~/Library/Mobile Documents/iCloud~com~mobileorg~mobileorg/Documents")))
#+end_src
* Packages
** zenburn-theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :straight t
    :config
    (progn
      (load-theme 'zenburn t)))
  ;; (use-package dracula-theme
  ;;   :straight t
  ;;   :config
  ;;   (progn
  ;;     (load-theme 'dracula t)))

#+end_src
** lsp-mode
#+begin_src emacs-lisp
    (use-package lsp-mode
      :straight t
      :diminish
      :hook ((typescript-ts-mode . lsp-deferred)
             (typescript-ts-mode . hs-minor-mode)
             (web-mode . lsp-deferred))
      :config
      (progn
        (setq lsp-ui-doc-enable t)
        (setq lsp-eldoc-hook nil)
        (setq lsp-log nil
              lsp-restart 'auto-restart
              lsp-clients-typescript-prefer-use-project-ts-server t
              lsp-javascript-suggest-auto-imports nil
              lsp-lens-enable nil
              lsp-clients-typescript-log-verbosity "verbose"
              lsp-typescript-surveys-enabled nil
              lsp-typescript-update-imports-on-file-move-enabled "never"
              lsp-typescript-format-enable nil
              lsp-javascript-format-enable nil
              lsp-modeline-diagnostics-enable nil
              lsp-modeline-code-actions-enable nil
              lsp-headerline-breadcrumb-enable nil)))
    (use-package lsp-ui
      :after lsp-mode
      :straight t
      :commands lsp-ui-mode
      :config
      (progn
        (setq lsp-ui-sideline-enable nil
              lsp-ui-doc-show-with-mouse nil
              lsp-ui-doc-show-with-cursor t)))
#+end_src
** alpheleia
#+begin_src emacs-lisp
  (use-package apheleia
    :straight (alpheleia-formatters :host github
                                    :repo "radian-software/apheleia")
    :diminish
    :config
    (progn
      (apheleia-global-mode +1)))
#+end_src

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight (flycheck :host github
                        :repo "flycheck/flycheck")
    :bind (("C-c f e" . flycheck-list-errors))
    :diminish
    :hook ((typescript-ts-mode . flycheck-mode)))
#+end_src
** flycheck-pos-tip
#+begin_src emacs-lisp
  (use-package flycheck-pos-tip
    :after flycheck
    :straight (flycheck-pos-tip :host github
                                :repo "flycheck/flycheck-pos-tip")
    :diminish
    :hook ((flycheck-mode . flycheck-pos-tip-mode)))
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :straight t
    :after org-mode
    :hook ((org-mode . (lambda () (org-bullets-mode nil)))))
#+end_src
** ispell
#+begin_src emacs-lisp
  (use-package ispell
    :straight t
    :config
    (progn
      (when (executable-find "aspell")
        (setq ispell-program-name "aspell"
              ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
              ispell-silently-savep t))))
#+end_src
** flyspell
#+begin_src emacs-lisp
  (use-package flyspell
    :after ispell
    :straight t
    :diminish
    :hook ((text-mode . flyspell-mode)
           (org-mode . flyspell-mode))
    :config
    (progn
      (setq flyspell-use-meta-tab nil)))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind (("C-x g" . magit-status)))
#+end_src
** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :diminish
    :hook ((prog-mode . rainbow-mode)
           (help-mode . rainbow-mode)))
#+end_src
** helm
#+begin_src emacs-lisp
  (use-package helm
    :straight t
    :diminish
    :bind (("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-s" . helm-swoop-without-pre-input)
           ("C-h b" . helm-descbinds)
           ("C-h a" . helm-apropos)
           ("C-x r l" . helm-bookmarks)
           ("C-x c m" . helm-all-mark-rings)
           ("C-x c o" . helm-occur)
           ("C-x c r" . helm-recentf)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files))
    :config
    (progn
      (helm-autoresize-mode 1)
      (helm-mode)
      (setq helm-locate-command "locate -i -r %s"
            helm-idle-delay 0.0
            helm-input-idle-delay 0.01
            helm-quick-update t
            helm-mode-fuzzy-match t
            helm-ff-skip-boring-files t
            helm-ff-newfile-prompt-p nil
            helm-ff-fuzzy-match t
            helm-yas-display-key-on-candidate t
            helm-locate-fuzzy-match t
            helm-recentf-fuzzy-match t
            helm-buffers-fuzzy-match t
            helm-apropos-fuzzy-match t
            helm-M-x-fuzzy-match t
            helm-M-x-requires-pattern nil
            helm-move-to-line-cycle-in-source nil
            helm-display-header-line nil)))
  (use-package helm-ag
    :after helm
    :straight t)
  (use-package helm-swoop
    :after helm
    :straight t
    :config
    (progn
      (setq helm-swoop-move-to-line-cycle nil
            helm-swoop-split-direction 'split-window-vertically
            helm-swoop-use-fuzzy-match t
            helm-swoop-split-with-multiple-windows nil)))
  (use-package helm-descbinds
    :after helm
    :straight t)
#+end_src
** bacon
#+begin_src emacs-lisp
  (use-package beacon
    :straight t
    :diminish
    :config
    (progn
      (beacon-mode 1)
      (setq beacon-blink-when-point-moves-vertically nil
            beacon-blink-when-point-moves-horizontally nil
            beacon-blink-when-buffer-changes t
            beacon-blink-when-window-scrolls t
            beacon-blink-when-window-changes t
            beacon-blink-when-focused nil
            beacon-blink-duration 0.3
            beacon-blink-delay 0.3
            beacon-size 20
            beacon-color 0.5)))
#+end_src
** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :diminish
    :bind (("C-x u" . undo-tree-visualize))
    :config
    (progn
      (setq undo-tree-visualizer-timestamps t
            undo-tree-visualizer-diff nil
            undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
      (global-undo-tree-mode)))
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src
** restclient
#+begin_src emacs-lisp
  (use-package restclient
    :after company
    :straight t
    :mode (("\\.rest" . restclient-mode) ("\\.http" . restclient-mode)))
#+end_src
** company
#+begin_src emacs-lisp
  (use-package company
    :diminish
    :straight t
    :hook ((restclient-mode . (lambda ()
                                (company-mode 1)
                                (company-restclient 1))))
    :config
    (progn (setq completion-ignore-case t)))
  (use-package company-box
    :diminish
    :straight t
    :hook (company-mode . company-box-mode))
#+end_src
** web-mode
#+begin_src emacs-lisp
  (use-package web-mode
    :straight (web-mode :host github
                        :repo "fxbois/web-mode")
    :mode (("\\.html$" . web-mode)
           ("\\.vue" . web-mode)
           ("\\.tsx" . web-mode)
           ("\\.jsx" . web-mode)
           ("\\.css$" . web-mode))
    :config
    (progn
      (setq web-mode-markup-indent-offset 2
            web-mode-comment-style 2
            web-mode-css-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-enable-auto-pairing t
            web-mode-enable-current-element-highlight t
            web-mode-enable-current-column-highlight t)))
#+end_src
** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config
    (progn
      (exec-path-from-shell-initialize)
      (setq insert-directory-program "gls" dired-use-ls-dired t
            exec-path (append exec-path '("/usr/local/bin")))
      (setenv "PATH" (concat (getenv "PATH") "/usr/local/bin"))))
#+end_src
** diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :straight t
    :config
    (global-diff-hl-mode))
#+end_src
** eat
#+begin_src emacs-lisp
  (use-package eat
    :straight (eat :type git
                   :host codeberg
                   :repo "akib/emacs-eat"
                   :files ("*.el" ("term" "term/*.el") "*.texi"
                           "*.ti" ("terminfo/e" "terminfo/e/*")
                           ("terminfo/65" "terminfo/65/*")
                           ("integration" "integration/*")
                           (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src
** jest-test-mode
#+begin_src emacs-lisp
  (use-package jest-test-mode
    :straight t
    :hook ((typescript-ts-mode . jest-test-mode)))
#+end_src
** general
#+begin_src emacs-lisp
  (use-package general
    :straight t)
#+end_src
** mustache
#+begin_src emacs-lisp
  (use-package mustache-mode
    :straight t)
#+end_src
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t)
#+end_src
** dap-mode
#+begin_src emacs-lisp
      (use-package dap-mode
        :straight t
        :after lsp-mode general
        ;; Uncomment the config below if you want all UI panes to be hidden by default!
        :custom
        (lsp-enable-dap-auto-configure nil)
        :config
        (dap-ui-mode 1)
        :config
        (progn
          (require 'dap-node)
          (dap-node-setup)
          ;; Bind `C-c l d` to `dap-hydra` for easy access
          (general-define-key
           :keymaps 'lsp-mode-map
           :prefix lsp-keymap-prefix
           "d" '(dap-hydra t :wk "debugger"))))
      ;; (use-package dap-mode-launch-json
      ;;   :straight (dap-mode-launch-json :host github
      ;;                       :repo "nbfalcon/dap-mode-launch-json")
  ;;  )
#+end_src
** dotenv-mode
#+begin_src emacs-lisp
  (use-package dotenv-mode
    :straight t)
#+end_src
