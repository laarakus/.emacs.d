#+STARTUP: hidestars

* Information
  #+begin_src emacs-lisp
(setq user-full-name "Walid LAARAKI"
      user-mail-address "wlaaraki@gmail.com"
      user-home-directory (concat (getenv "HOME")"/")
      user-emacs-directory (concat user-home-directory ".emacs.d/")
      custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
  #+end_src
* Interface
** themes
*** zenburn
    #+begin_src emacs-lisp
(use-package zenburn-theme
  :ensure t
  :pin melpa-stable
  :config
  (load-theme 'zenburn t))
    #+end_src
** fonts
   #+Begin_src emacs-lisp
(set-face-attribute 'default nil :family "Monospace" :height 160)
(set-face-attribute 'variable-pitch nil :family "Sans" :height 160)
(global-font-lock-mode 1)
   #+end_src
** visual
   #+Begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq-default truncate-lines 1
       cursor-in-non-selected-windows nil)
(setq echo-keystrokes 0.1
      scroll-step 1
      frame-resize-pixelwise t
      mouse-wheel-scroll-amount '(1 ((shift) . 1))
      mouse-wheel-progressive-speed nil
      visible-bell t
      blink-matching-paren t
      show-paren-delay 0
      show-paren-style 'expression
      truncate-partial-width-windows 1
      frame-title-format ""
      icon-title-format frame-title-format)
(show-paren-mode t)
(blink-cursor-mode -1)
(column-number-mode 1)
(global-hl-line-mode 1)
(toggle-indicate-empty-lines 1)
(diminish 'visual-line-mode)
(setq ring-bell-function 'ignore)
(global-set-key (kbd "M-p") 'text-scale-increase)
(global-set-key (kbd "M-m") 'text-scale-decrease)
(global-whitespace-mode 1)
   #+end_src
* Behavior
** general
   #+Begin_src emacs-lisp
(setq grep-command "grep -nHor --exclude-dir={assets,*\bower_components,\*node_modules} ctrl "
      backup-directory-alist '(("." . "~/.emacs.d/backups"))
      delete-old-versions -1
      version-control t
      vc-make-backup-files t
      auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))
      savehist-file "~/.emacs.d/savehist"
      history-length t
      history-delete-duplicates t
      savehist-additional-variables '(kill-ring search-ring regexp-search-ring)
      locale-coding-system 'utf-8
      sentence-end-double-space nil)
(setq-default indent-tabs-mode nil
              tab-width 2)
(setq mac-command-modifier 'meta
      mac-option-modifier 'none)
(savehist-mode 1)
(icomplete-mode -1)
(electric-pair-mode 1)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(delete-selection-mode t)
(global-auto-revert-mode t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src
** bindings
   #+Begin_src emacs-lisp
(global-set-key (kbd "C-x m") 'eshell)
(global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))
(global-set-key (kbd "C-x C-b") 'ibuffer)
   #+end_src
* Packages
** dired
    #+begin_src emacs-lisp
(setq trash-directory (concat user-home-directory "trash")
      delete-by-moving-to-trash t
      dired-listing-switches "-aFlGXh1v --group-directories-first"
      global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)
(add-hook 'dired-mode-hook (lambda () (visual-line-mode -1)))
    #+end_src
** tramp
    #+begin_src emacs-lisp
(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
    #+end_src
** ibuffer
    #+begin_src emacs-lisp
(setq ibuffer-default-sorting-mode 'major-mode
      ibuffer-movement-cycle nil
      ibuffer-never-show-predicates '("^\\*helm")
      savehist-save-minibuffer-history 1
      ibuffer-show-empty-filter-groups nil
      ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("web" (or
                       (mode . js2-mode)
                       (mode . restclient-mode)
                       (mode . web-mode)
                       (mode . php-mode)
                       (mode . css-mode)))
               ("erc" (mode . erc-mode))
               ("org" (mode . org-mode))
               ("images" (mode . image-mode))
               ("help" (or
                        (name . "^\\*Help\\*$")
                        (name . "^\\*Apropos\\*$")
                        (name . "^\\*info\\*$")))
               ("emacs" (or
                         (name . "^\\*Edit Macro\\*$")
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))
               ("gnus" (or
                        (mode . message-mode)
                        (mode . bbdb-mode)
                        (mode . mail-mode)
                        (mode . gnus-group-mode)
                        (mode . gnus-summary-mode)
                        (mode . gnus-article-mode)
                        (name . "^\\.bbdb$")
                        (name . "^\\.newsrc-dribble")))))))
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "default")))
    #+end_src
** ispell
    #+begin_src emacs-lisp
(use-package ispell
  :if (not (bound-and-true-p disable-pkg-ispell))
  :defer t
  :config
  (progn
    (when (executable-find "aspell")
      (setq ispell-program-name "aspell"
            ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
            ispell-silently-savep t))))
    #+end_src
** flyspell
    #+begin_src emacs-lisp
(use-package flyspell
  :diminish flyspell-mode
  :init
  (progn
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (add-hook 'text-mode-hook 'turn-on-flyspell)
    (add-hook 'org-mode-hook  'turn-on-flyspell))
  :config
  (progn
    (setq flyspell-use-meta-tab nil
          flyspell-auto-correct-binding (kbd "C-x a c"))))
    #+end_src
** eshell
    #+begin_src emacs-lisp
(add-hook 'eshell-mode-hook (lambda () (setenv "PAGER" "cat") (setenv "EDITOR" "emacsclient")))
    #+end_src
** magit
    #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :pin melpa-stable
  :init
(global-set-key (kbd "C-x g") 'magit-status))
    #+end_src
** org-mode
    #+begin_src emacs-lisp
(use-package org-plus-contrib
  :ensure t
  :pin org
  :mode (("\\.org$" . org-mode))
  :init
  (progn
    (setq org-src-fontify-natively t
          org-src-window-setup 'current-window
          org-src-strip-leading-and-trailing-blank-lines t
          org-src-preserve-indentation t
          org-src-tab-acts-natively t
          org-agenda-include-diary nil
          org-use-speed-commands t
          org-use-fast-todo-selection t
          org-agenda-start-on-weekday 7
          org-tags-column 45)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
    #+end_src
** rainbow-mode
    #+begin_src emacs-lisp
(use-package rainbow-mode
  :pin gnu
  :ensure t
  :diminish 'rainbow-mode
  :config
  (progn
    (add-hook 'prog-mode-hook 'rainbow-mode)
    (add-hook 'help-mode-hook 'rainbow-mode)))
    #+end_src
** helm
    #+begin_src emacs-lisp
(use-package helm
  :ensure helm-projectile
  :ensure helm-swoop
  :ensure helm-descbinds
  :diminish helm-mode
  :bind (("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-s" . helm-swoop-without-pre-input)
         ("C-h b" . helm-descbinds)
         ("C-h a" . helm-apropos)
         ("C-c p h" . helm-projectile)
         ("C-x r l" . helm-bookmarks)
         ("C-x c m" . helm-all-mark-rings)
         ("C-x c o" . helm-occur)
         ("C-x c r" . helm-recentf)
         ("C-x b" . helm-mini)
         ("C-x C-f" . helm-find-files))
  :config
  (progn
    (helm-projectile-on)
    (helm-autoresize-mode 1)
    (helm-mode)
    (setq helm-locate-command "locate -i -r %s"
          helm-idle-delay 0.0
          helm-input-idle-delay 0.01
          helm-quick-update t
          helm-mode-fuzzy-match t
          helm-ff-skip-boring-files t
          helm-ff-newfile-prompt-p nil
          helm-ff-fuzzy-match t
          helm-yas-display-key-on-candidate t
          helm-locate-fuzzy-match t
          helm-projectile-fuzzy-match t
          helm-recentf-fuzzy-match t
          helm-buffers-fuzzy-match t
          helm-apropos-fuzzy-match t
          helm-M-x-fuzzy-match t
          helm-swoop-move-to-line-cycle nil
          helm-swoop-split-direction 'split-window-vertically
          helm-M-x-requires-pattern nil
          helm-swoop-use-fuzzy-match t
          helm-swoop-split-with-multiple-windows nil
          helm-display-header-line nil)))
    #+end_src
** bacon
    #+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :diminish beacon-mode
  :config
  (progn
    (beacon-mode 1)
    (setq beacon-blink-when-point-moves-vertically nil
          beacon-blink-when-point-moves-horizontally nil
          beacon-blink-when-buffer-changes t
          beacon-blink-when-window-scrolls t
          beacon-blink-when-window-changes t
          beacon-blink-when-focused nil
          beacon-blink-duration 0.3
          beacon-blink-delay 0.3
          beacon-size 20
          beacon-color 0.5)))
    #+end_src
** undootree
    #+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :bind (("C-x u" . undo-tree-visualize))
  :commands global-undo-tree-mode
  :config
  (progn
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff nil)))
    #+end_src
** rainbow-delimiters
    #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :defer t
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
    #+end_src
** php
    #+begin_src emacs-lisp
(use-package php-mode
  :ensure t
  :config
  (progn
    (add-hook 'php-mode-hook (lambda ()
                               (setq indent-tabs-mode nil
                                     tab-width 2
                                     c-basic-offset 2)))
    (bind-key "C-c TAB" 'indent-region php-mode-map)
    (bind-key "C-c C-c" 'glen/toggle-comments php-mode-map)))
    #+end_src
** restclient
    #+begin_src emacs-lisp
(add-hook 'restclient-mode-hook (lambda ()
                                  (company-mode 1)
                                  (company-restclient 1)))
(add-to-list 'auto-mode-alist '("\\.rest$" . restclient-mode))
    #+end_src
** inprogress web
    #+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.html$" . web-mode)
         ("\\.vue" . web-mode)
         ("\\.js" . web-mode)
         ("\\.json" . web-mode)
         ("\\.css$" . web-mode))
  :init
  (progn
    (setq web-mode-markup-indent-offset 2
          web-mode-comment-style 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-auto-pairing t
          web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight t))
  :bind
  (("C-c C-c" . web-mode-comment-or-uncomment)))
    #+end_src
** erc
    #+begin_src emacs-lisp
(setq erc-echo-notices-in-minibuffer-flag t
      erc-fill-column 70
      erc-nick "sireseog"
      erc-keywords '("sireseog")
      erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                "324" "329" "332" "333" "353" "477")
      erc-hide-list '("JOIN" "PART" "QUIT"))
    #+end_src
** impatient mode
    #+begin_src emacs-lisp
(use-package impatient-mode
  :ensure t
  :pin melpa-stable)
    #+end_src
** avy
    #+begin_src emacs-lisp
(use-package avy
  :pin melpa-stable
  :ensure t
  :bind
  (("C-c j" . avy-goto-char)))
    #+end_src
** exec shell
    #+begin_src emacs-lisp
(use-package exec-path-from-shell
  :pin melpa-stable
  :ensure t
  :init
  (exec-path-from-shell-initialize))
(setq insert-directory-program "gls" dired-use-ls-dired t)
(setenv "PATH" (concat (getenv "PATH") "/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
    #+end_src
** kube
    #+begin_src emacs-lisp
(use-package kubernetes
  :ensure t
  :commands (kubernetes-overview))
    #+end_src
** flycheck
    #+begin_src emacs-lisp
 (defun jc/use-eslint-from-node-modules ()
    "Set local eslint if available."
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))

           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
(use-package flycheck
  :ensure t
  :diminish
  :config
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (add-hook 'flycheck-mode-hook 'jc/use-eslint-from-node-modules)
  (add-hook 'web-mode-hook #'jc/use-eslint-from-node-modules)
  (flycheck-add-mode 'javascript-eslint 'web-mode))
    #+end_src
** git
    #+begin_src emacs-lisp
 (use-package diff-hl
    :ensure t
    :init
    (global-diff-hl-mode))
    #+end_src
